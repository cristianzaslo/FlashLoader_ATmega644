##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN             05/May/2021  11:04:55 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  D:\Projects\FlashLoader_AT644\Source\Uart.c             #
#    Command line =  D:\Projects\FlashLoader_AT644\Source\Uart.c             #
#                    -IC:\IARSystems\avr\inc\ -ID:\Projects\FlashLoader_AT64 #
#                    4\Source\ -lA D:\Projects\FlashLoader_AT644\Out\ -lC    #
#                    D:\Projects\FlashLoader_AT644\Out\ -o                   #
#                    D:\Projects\FlashLoader_AT644\Out\ -e -s3 --cpu=m16     #
#                    --memory_model=small --eeprom_size=2048                 #
#                    --initializers_in_flash                                 #
#    List file    =  D:\Projects\FlashLoader_AT644\Out\Uart.lst              #
#    Object file  =  D:\Projects\FlashLoader_AT644\Out\Uart.r90              #
#                                                                            #
#                                                                            #
##############################################################################

      1          /*~-1*/
      2          /*~XSF_LANGUAGE: C/C++*/
      3          /*~A:1*/
      4          /*~+:Header*/
      5          /*~T*/
      6          /* SOURCE FILE    <Uart.c>
      7          
      8           **************************************************************************
      9           *  PROJECT       <FlashLoader_AT644>
     10           *  MODULE        <Uart>
     11           *  RESPONSIBLE   <Cristian Zaslo>
     12           **************************************************************************
     13           *  PURPOSE:      UART driver
     14           *
     15           *
     16           **************************************************************************
     17           *  REMARKS:
     18           *  ATMEGA 644 compliant
     19           *
     20           **************************************************************************
     21           *  CHANGE HISTORY:
     22           *  Log of all revisions so far:
     23           *
     24           *  Rev 1.0   Mar 01 2021    CrZa
     25           *  Initial revision.
     26           *
     27           *************************************************************************/
     28          
     29          
     30          
     31          /*~E:A1*/
     32          /*~A:2*/
     33          /*~+:Includes*/
     34          /*~T*/
     35          #include <iom644.h>

   \                                 In segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __tiny _A_UCSR0A;
   \                     _A_UCSR0A:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __tiny _A_UCSR0B;
   \                     _A_UCSR0B:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0xc2
   \   union <unnamed> volatile __tiny _A_UCSR0C;
   \                     _A_UCSR0C:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0xc4
   \   union <unnamed> volatile __tiny _A_UBRR0L;
   \                     _A_UBRR0L:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0xc5
   \   union <unnamed> volatile __tiny _A_UBRR0H;
   \                     _A_UBRR0H:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0xc6
   \   union <unnamed> volatile __tiny _A_UDR0;
   \                     _A_UDR0:
   \   00000000                              DS 1
     36          #include "Global.h"
     37          #include "Uart.h"
     38          
     39          /*~E:A2*/
     40          /*~A:3*/
     41          /*~+:Types*/
     42          /*~T*/
     43          
     44          /*~E:A3*/
     45          /*~A:4*/
     46          /*~+:Constants*/
     47          /*~T*/
     48          
     49          /*~E:A4*/
     50          /*~A:5*/
     51          /*~+:Variables*/
     52          /*~T*/
     53          
     54          /*~E:A5*/
     55          /*~A:6*/
     56          /*~+:Macros*/
     57          /*~T*/
     58          
     59          /*~E:A6*/
     60          /*~A:7*/
     61          /*~+:Flags / Bit Masks*/
     62          /*~T*/
     63          
     64          /*~E:A7*/
     65          /*~A:8*/
     66          /*~+:Function prototypes*/
     67          /*~T*/
     68          
     69          /*~E:A8*/
     70          /*~A:9*/
     71          /*~+:void UA_v_SetBaudrate (const uint16_t ui16_BaudRate)*/
     72          /*~F:10*/

   \                                 In segment CODE, align 2, keep-with-next
     73          void UA_v_SetBaudrate (const uint16_t ui16_BaudRate)
     74          /*~-1*/
     75          {
     76             /*~T*/
     77             /* set low speed mode */
     78             UCSR0A_Bit1 = FALSE;
   \   __nearfunc void UA_v_SetBaudrate(uint16_t const);
   \                     UA_v_SetBaudrate:
   \   00000000   ....                       LDI     R30,_A_UCSR0A
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8120                       LD      R18,Z
   \   00000006   7F2D                       ANDI    R18,0xFD
   \   00000008   8320                       ST      Z,R18
     79          
     80             /* set baudrate, clear bits 12-15 of UBRR */
     81             UBRR0L = (uint8_t)ui16_BaudRate;
   \   0000000A   2F20                       MOV     R18,R16
   \   0000000C   9320....                   STS     _A_UBRR0L,R18
     82             UBRR0H = (uint8_t)(ui16_BaudRate >> 8) & (uint8_t)0x0F;
   \   00000010   2F01                       MOV     R16,R17
   \   00000012   E010                       LDI     R17,0
   \   00000014   700F                       ANDI    R16,0x0F
   \   00000016   9300....                   STS     _A_UBRR0H,R16
     83          
     84          /*~-1*/
     85          }
   \   0000001A   9508                       RET
     86          /*~E:F10*/
     87          /*~E:A9*/
     88          /*~A:11*/
     89          /*~+:void UA_v_SetFrameFormat (const uint8_t ui8_Mode, const uint8_t ui8_Parity, const uint8_t ui8_StopBits, const uint8_t ui8_CharSize, const uint8_t ui8_ClockPolarity)*/
     90          /*~F:12*/

   \                                 In segment CODE, align 2, keep-with-next
     91          void UA_v_SetFrameFormat (const uint8_t ui8_Mode, const uint8_t ui8_Parity, const uint8_t ui8_StopBits, const uint8_t ui8_CharSize, const uint8_t ui8_ClockPolarity)
     92          /*~-1*/
     93          {
     94             /*~T*/
     95             /* temporary */
     96             uint8_t ui8_Temp;
     97             /*~T*/
     98             /* set USART operation mode, parity, stop bits, char size, clock polarity */
     99             ui8_Temp  = ui8_Mode | ui8_Parity | ui8_StopBits | (ui8_CharSize & (uint8_t)0x06) | ui8_ClockPolarity;
   \   __nearfunc void UA_v_SetFrameFormat(uint8_t const, uint8_t const, uint8_t const, uint8_t const, uint8_t const);
   \                     UA_v_SetFrameFormat:
   \   00000000   2B10                       OR      R17,R16
   \   00000002   2B12                       OR      R17,R18
   \   00000004   2F03                       MOV     R16,R19
   \   00000006   7006                       ANDI    R16,0x06
   \   00000008   2B01                       OR      R16,R17
   \   0000000A   2B04                       OR      R16,R20
    100          
    101             /* copy value to UCSRC register */
    102             UCSR0C = ui8_Temp;
   \   0000000C   9300....                   STS     _A_UCSR0C,R16
    103          
    104             /*~I:13*/
    105             /* char size is 9 bits ?*/
    106             if (ui8_CharSize & 0x08)
   \   00000010   FB33                       BST     R19,3
   \   00000012   F436                       BRTC    ??UA_v_SetFrameFormat_0
    107             /*~-1*/
    108             {
    109                /*~T*/
    110                /* set UCSZ2 */
    111                UCSR0B_Bit2 = TRUE;
   \   00000014   ....                       LDI     R30,_A_UCSR0B
   \   00000016   E0F0                       LDI     R31,0
   \   00000018   8100                       LD      R16,Z
   \   0000001A   6004                       ORI     R16,0x04
   \   0000001C   8300                       ST      Z,R16
   \   0000001E   9508                       RET
    112             /*~-1*/
    113             }
    114             /*~O:I13*/
    115             /*~-2*/
    116             else
    117             {
    118                /*~T*/
    119                /* clear UCSZ2 */
    120                UCSR0B_Bit2 = FALSE;
   \                     ??UA_v_SetFrameFormat_0:
   \   00000020   ....                       LDI     R30,_A_UCSR0B
   \   00000022   E0F0                       LDI     R31,0
   \   00000024   8100                       LD      R16,Z
   \   00000026   7F0B                       ANDI    R16,0xFB
   \   00000028   8300                       ST      Z,R16
    121             /*~-1*/
    122             }
    123             /*~E:I13*/
    124          /*~-1*/
    125          }
   \   0000002A   9508                       RET
    126          /*~E:F12*/
    127          /*~E:A11*/
    128          /*~A:14*/
    129          /*~+:void UA_v_Enable_Rx (void)*/
    130          /*~F:15*/

   \                                 In segment CODE, align 2, keep-with-next
    131          void UA_v_Enable_Rx (void)
    132          /*~-1*/
    133          {
    134             /*~T*/
    135             /* enable receiver */
    136             UCSR0B_Bit4 = TRUE;
   \   __nearfunc void UA_v_Enable_Rx();
   \                     UA_v_Enable_Rx:
   \   00000000   ....                       LDI     R30,_A_UCSR0B
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   6100                       ORI     R16,0x10
   \   00000008   8300                       ST      Z,R16
    137          
    138          /*~-1*/
    139          }
   \   0000000A   9508                       RET
    140          /*~E:F15*/
    141          /*~E:A14*/
    142          /*~A:16*/
    143          /*~+:void UA_v_Disable_Rx (void)*/
    144          /*~F:17*/

   \                                 In segment CODE, align 2, keep-with-next
    145          void UA_v_Disable_Rx (void)
    146          /*~-1*/
    147          {
    148             /*~T*/
    149             /* disable receiver */
    150             UCSR0B_Bit4 = FALSE;
   \   __nearfunc void UA_v_Disable_Rx();
   \                     UA_v_Disable_Rx:
   \   00000000   ....                       LDI     R30,_A_UCSR0B
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   7E0F                       ANDI    R16,0xEF
   \   00000008   8300                       ST      Z,R16
    151          
    152          /*~-1*/
    153          }
   \   0000000A   9508                       RET
    154          /*~E:F17*/
    155          /*~E:A16*/
    156          /*~A:18*/
    157          /*~+:void UA_v_Enable_Tx (void)*/
    158          /*~F:19*/

   \                                 In segment CODE, align 2, keep-with-next
    159          void UA_v_Enable_Tx (void)
    160          /*~-1*/
    161          {
    162             /*~T*/
    163             /* enable transmitter */
    164             UCSR0B_Bit3 = TRUE;
   \   __nearfunc void UA_v_Enable_Tx();
   \                     UA_v_Enable_Tx:
   \   00000000   ....                       LDI     R30,_A_UCSR0B
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   6008                       ORI     R16,0x08
   \   00000008   8300                       ST      Z,R16
    165          
    166          /*~-1*/
    167          }
   \   0000000A   9508                       RET
    168          /*~E:F19*/
    169          /*~E:A18*/
    170          /*~A:20*/
    171          /*~+:void UA_v_Disable_Tx (void)*/
    172          /*~F:21*/

   \                                 In segment CODE, align 2, keep-with-next
    173          void UA_v_Disable_Tx (void)
    174          /*~-1*/
    175          {
    176             /*~T*/
    177             /* disable transmitter */
    178             UCSR0B_Bit3 = FALSE;
   \   __nearfunc void UA_v_Disable_Tx();
   \                     UA_v_Disable_Tx:
   \   00000000   ....                       LDI     R30,_A_UCSR0B
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   7F07                       ANDI    R16,0xF7
   \   00000008   8300                       ST      Z,R16
    179          
    180          /*~-1*/
    181          }
   \   0000000A   9508                       RET
    182          /*~E:F21*/
    183          /*~E:A20*/
    184          /*~A:22*/
    185          /*~+:void UA_v_Enable_Interrupt_Tx_Complete (void)*/
    186          /*~F:23*/

   \                                 In segment CODE, align 2, keep-with-next
    187          void UA_v_Enable_Interrupt_Tx_Complete (void)
    188          /*~-1*/
    189          {
    190             /*~T*/
    191             /* enable Tx complete interrupt */
    192             UCSR0B_Bit6 = TRUE;
   \   __nearfunc void UA_v_Enable_Interrupt_Tx_Complete();
   \                     UA_v_Enable_Interrupt_Tx_Complete:
   \   00000000   ....                       LDI     R30,_A_UCSR0B
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   6400                       ORI     R16,0x40
   \   00000008   8300                       ST      Z,R16
    193          
    194          /*~-1*/
    195          }
   \   0000000A   9508                       RET
    196          /*~E:F23*/
    197          /*~E:A22*/
    198          /*~A:24*/
    199          /*~+:void UA_v_Disable_Interrupt_Tx_Complete (void)*/
    200          /*~F:25*/

   \                                 In segment CODE, align 2, keep-with-next
    201          void UA_v_Disable_Interrupt_Tx_Complete (void)
    202          /*~-1*/
    203          {
    204             /*~T*/
    205             /* disable Tx complete interrupt */
    206             UCSR0B_Bit6 = FALSE;
   \   __nearfunc void UA_v_Disable_Interrupt_Tx_Complete();
   \                     UA_v_Disable_Interrupt_Tx_Complete:
   \   00000000   ....                       LDI     R30,_A_UCSR0B
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   7B0F                       ANDI    R16,0xBF
   \   00000008   8300                       ST      Z,R16
    207          
    208          /*~-1*/
    209          }
   \   0000000A   9508                       RET
    210          /*~E:F25*/
    211          /*~E:A24*/
    212          /*~A:26*/
    213          /*~+:void UA_v_Enable_Interrupt_Tx_Empty (void)*/
    214          /*~F:27*/

   \                                 In segment CODE, align 2, keep-with-next
    215          void UA_v_Enable_Interrupt_Tx_Empty (void)
    216          /*~-1*/
    217          {
    218             /*~T*/
    219             /* enable transmit buffer empty interrupt */
    220             UCSR0B_Bit5 = TRUE;
   \   __nearfunc void UA_v_Enable_Interrupt_Tx_Empty();
   \                     UA_v_Enable_Interrupt_Tx_Empty:
   \   00000000   ....                       LDI     R30,_A_UCSR0B
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   6200                       ORI     R16,0x20
   \   00000008   8300                       ST      Z,R16
    221          
    222          /*~-1*/
    223          }
   \   0000000A   9508                       RET
    224          /*~E:F27*/
    225          /*~E:A26*/
    226          /*~A:28*/
    227          /*~+:void UA_v_Disable_Interrupt_Tx_Empty (void)*/
    228          /*~F:29*/

   \                                 In segment CODE, align 2, keep-with-next
    229          void UA_v_Disable_Interrupt_Tx_Empty (void)
    230          /*~-1*/
    231          {
    232             /*~T*/
    233             /* disable transmit buffer empty interrupt */
    234             UCSR0B_Bit5 = FALSE;
   \   __nearfunc void UA_v_Disable_Interrupt_Tx_Empty();
   \                     UA_v_Disable_Interrupt_Tx_Empty:
   \   00000000   ....                       LDI     R30,_A_UCSR0B
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   7D0F                       ANDI    R16,0xDF
   \   00000008   8300                       ST      Z,R16
    235          
    236          /*~-1*/
    237          }
   \   0000000A   9508                       RET
    238          /*~E:F29*/
    239          /*~E:A28*/
    240          /*~A:30*/
    241          /*~+:void UA_v_Enable_Interrupt_Rx (void)*/
    242          /*~F:31*/

   \                                 In segment CODE, align 2, keep-with-next
    243          void UA_v_Enable_Interrupt_Rx (void)
    244          /*~-1*/
    245          {
    246             /*~T*/
    247             /* enable Rx complete interrupt */
    248             UCSR0B_Bit7 = TRUE;
   \   __nearfunc void UA_v_Enable_Interrupt_Rx();
   \                     UA_v_Enable_Interrupt_Rx:
   \   00000000   ....                       LDI     R30,_A_UCSR0B
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   6800                       ORI     R16,0x80
   \   00000008   8300                       ST      Z,R16
    249          
    250          /*~-1*/
    251          }
   \   0000000A   9508                       RET
    252          /*~E:F31*/
    253          /*~E:A30*/
    254          /*~A:32*/
    255          /*~+:void UA_v_Disable_Interrupt_Rx (void)*/
    256          /*~F:33*/

   \                                 In segment CODE, align 2, keep-with-next
    257          void UA_v_Disable_Interrupt_Rx (void)
    258          /*~-1*/
    259          {
    260             /*~T*/
    261             /* disable Rx complete interrupt */
    262             UCSR0B_Bit7 = FALSE;
   \   __nearfunc void UA_v_Disable_Interrupt_Rx();
   \                     UA_v_Disable_Interrupt_Rx:
   \   00000000   ....                       LDI     R30,_A_UCSR0B
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   770F                       ANDI    R16,0x7F
   \   00000008   8300                       ST      Z,R16
    263          
    264          /*~-1*/
    265          }
   \   0000000A   9508                       RET
    266          /*~E:F33*/
    267          /*~E:A32*/
    268          /*~A:34*/
    269          /*~+:bool_t UA_f_Rx_Complete (void)*/
    270          /*~F:35*/

   \                                 In segment CODE, align 2, keep-with-next
    271          bool_t UA_f_Rx_Complete (void)
    272          /*~-1*/
    273          {
    274             /*~T*/
    275             /* return receive complete status */
    276             return (bool_t)UCSR0A_Bit7;
   \   __nearfunc unsigned char UA_f_Rx_Complete();
   \                     UA_f_Rx_Complete:
   \   00000000   ....                       LDI     R30,_A_UCSR0A
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   0F00                       LSL     R16
   \   00000008   E000                       LDI     R16,0
   \   0000000A   1F00                       ROL     R16
   \   0000000C   9508                       RET
    277          /*~-1*/
    278          }
    279          /*~E:F35*/
    280          /*~E:A34*/
    281          /*~A:36*/
    282          /*~+:bool_t UA_f_Tx_Complete (void)*/
    283          /*~F:37*/

   \                                 In segment CODE, align 2, keep-with-next
    284          bool_t UA_f_Tx_Complete (void)
    285          /*~-1*/
    286          {
    287             /*~T*/
    288             /* return transmit complete status */
    289             return (bool_t)UCSR0A_Bit6;
   \   __nearfunc unsigned char UA_f_Tx_Complete();
   \                     UA_f_Tx_Complete:
   \   00000000   ....                       LDI     R30,_A_UCSR0A
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   FB06                       BST     R16,6
   \   00000008   E000                       LDI     R16,0
   \   0000000A   F900                       BLD     R16,0
   \   0000000C   9508                       RET
    290          /*~-1*/
    291          }
    292          /*~E:F37*/
    293          /*~E:A36*/
    294          /*~A:38*/
    295          /*~+:void UA_v_Clear_Tx_Complete (void)*/
    296          /*~F:39*/

   \                                 In segment CODE, align 2, keep-with-next
    297          void UA_v_Clear_Tx_Complete (void)
    298          /*~-1*/
    299          {
    300             /*~T*/
    301             /* clear transmit complete status bit */
    302             UCSR0A_Bit6 = FALSE;
   \   __nearfunc void UA_v_Clear_Tx_Complete();
   \                     UA_v_Clear_Tx_Complete:
   \   00000000   ....                       LDI     R30,_A_UCSR0A
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   7B0F                       ANDI    R16,0xBF
   \   00000008   8300                       ST      Z,R16
    303          /*~-1*/
    304          }
   \   0000000A   9508                       RET
    305          /*~E:F39*/
    306          /*~E:A38*/
    307          /*~A:40*/
    308          /*~+:bool_t UA_f_Tx_Empty (void)*/
    309          /*~F:41*/

   \                                 In segment CODE, align 2, keep-with-next
    310          bool_t UA_f_Tx_Empty (void)
    311          /*~-1*/
    312          {
    313             /*~T*/
    314             /* return transmit buffer empty status */
    315             return (bool_t)UCSR0A_Bit5;
   \   __nearfunc unsigned char UA_f_Tx_Empty();
   \                     UA_f_Tx_Empty:
   \   00000000   ....                       LDI     R30,_A_UCSR0A
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   FB05                       BST     R16,5
   \   00000008   E000                       LDI     R16,0
   \   0000000A   F900                       BLD     R16,0
   \   0000000C   9508                       RET
    316          /*~-1*/
    317          }
    318          /*~E:F41*/
    319          /*~E:A40*/
    320          /*~A:42*/
    321          /*~+:void UA_v_MPC_WaitAddress (void)*/
    322          /*~F:43*/

   \                                 In segment CODE, align 2, keep-with-next
    323          void UA_v_MPC_WaitAddress (void)
    324          /*~-1*/
    325          {
    326             /*~T*/
    327             /* enable addressing */
    328             UCSR0A_Bit0 = TRUE;
   \   __nearfunc void UA_v_MPC_WaitAddress();
   \                     UA_v_MPC_WaitAddress:
   \   00000000   ....                       LDI     R30,_A_UCSR0A
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   6001                       ORI     R16,0x01
   \   00000008   8300                       ST      Z,R16
    329          
    330          /*~-1*/
    331          }
   \   0000000A   9508                       RET
    332          /*~E:F43*/
    333          /*~E:A42*/
    334          /*~A:44*/
    335          /*~+:void UA_v_MPC_WaitData (void)*/
    336          /*~F:45*/

   \                                 In segment CODE, align 2, keep-with-next
    337          void UA_v_MPC_WaitData (void)
    338          /*~-1*/
    339          {
    340             /*~T*/
    341             /* wait for data byte */
    342             UCSR0A_Bit0 = FALSE;
   \   __nearfunc void UA_v_MPC_WaitData();
   \                     UA_v_MPC_WaitData:
   \   00000000   ....                       LDI     R30,_A_UCSR0A
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8100                       LD      R16,Z
   \   00000006   7F0E                       ANDI    R16,0xFE
   \   00000008   8300                       ST      Z,R16
    343          
    344          /*~-1*/
    345          }
   \   0000000A   9508                       RET
    346          /*~E:F45*/
    347          /*~E:A44*/
    348          /*~A:46*/
    349          /*~+:void UA_v_SendChar (const uint16_t ui16_Char)*/
    350          /*~F:47*/

   \                                 In segment CODE, align 2, keep-with-next
    351          void UA_v_SendChar (const uint16_t ui16_Char)
    352          /*~-1*/
    353          {
    354             /*~I:48*/
    355             /* char size is 9 bit ? */
    356             if (UCSR0B_Bit2)
   \   __nearfunc void UA_v_SendChar(uint16_t const);
   \                     UA_v_SendChar:
   \   00000000   ....                       LDI     R30,_A_UCSR0B
   \   00000002   E0F0                       LDI     R31,0
   \   00000004   8120                       LD      R18,Z
   \   00000006   FF22                       SBRS    R18,2
   \   00000008   C00E                       RJMP    ??UA_v_SendChar_0
    357             /*~-1*/
    358             {
    359                /*~I:49*/
    360                /* must the 9th bit set ?*/
    361                if (ui16_Char & (uint16_t)0x0100)
   \   0000000A   2F21                       MOV     R18,R17
   \   0000000C   FF20                       SBRS    R18,0
   \   0000000E   C006                       RJMP    ??UA_v_SendChar_1
    362                /*~-1*/
    363                {
    364                   /*~T*/
    365                   /* set 9th bit */
    366                   UCSR0B_Bit0 = TRUE;
   \   00000010   ....                       LDI     R30,_A_UCSR0B
   \   00000012   E0F0                       LDI     R31,0
   \   00000014   8120                       LD      R18,Z
   \   00000016   6021                       ORI     R18,0x01
   \   00000018   8320                       ST      Z,R18
   \   0000001A   C005                       RJMP    ??UA_v_SendChar_0
    367                /*~-1*/
    368                }
    369                /*~O:I49*/
    370                /*~-2*/
    371                else
    372                {
    373                   /*~T*/
    374                   /* clear 9th bit */
    375                   UCSR0B_Bit0 = FALSE;
   \                     ??UA_v_SendChar_1:
   \   0000001C   ....                       LDI     R30,_A_UCSR0B
   \   0000001E   E0F0                       LDI     R31,0
   \   00000020   8120                       LD      R18,Z
   \   00000022   7F2E                       ANDI    R18,0xFE
   \   00000024   8320                       ST      Z,R18
    376                /*~-1*/
    377                }
    378                /*~E:I49*/
    379             /*~-1*/
    380             }
    381             /*~O:I48*/
    382             /*~-2*/
    383             else
    384             {
    385                /*~T*/
    386                /* 8 bit or less char size */
    387             /*~-1*/
    388             }
    389             /*~E:I48*/
    390             /*~T*/
    391             /* send first 8 bits */
    392             UDR0 = (uint8_t)ui16_Char;
   \                     ??UA_v_SendChar_0:
   \   00000026   9300....                   STS     _A_UDR0,R16
    393          
    394             /*~T*/
    395          
    396          /*~-1*/
    397          }
   \   0000002A   9508                       RET
    398          /*~E:F47*/
    399          /*~E:A46*/
    400          /*~A:50*/
    401          /*~+:uint8_t UA_ui8_GetErrors (void)*/
    402          /*~F:51*/

   \                                 In segment CODE, align 2, keep-with-next
    403          uint8_t UA_ui8_GetErrors (void)
    404          /*~-1*/
    405          {
    406             /*~T*/
    407             /* return Rx error status */
    408             return (UCSR0A & (uint8_t)0x1C);
   \   __nearfunc unsigned char UA_ui8_GetErrors();
   \                     UA_ui8_GetErrors:
   \   00000000   9100....                   LDS     R16,_A_UCSR0A
   \   00000004   710C                       ANDI    R16,0x1C
   \   00000006   9508                       RET
    409          /*~-1*/
    410          }
    411          /*~E:F51*/
    412          /*~E:A50*/
    413          /*~A:52*/
    414          /*~+:uint16_t UA_ui16_GetChar (void)*/
    415          /*~F:53*/

   \                                 In segment CODE, align 2, keep-with-next
    416          uint16_t UA_ui16_GetChar (void)
    417          /*~-1*/
    418          {
    419             /*~T*/
    420             /* receive char, clear all bits at initialization */
    421             uint16_t ui16_Result = 0;
   \   __nearfunc unsigned short UA_ui16_GetChar();
   \                     UA_ui16_GetChar:
   \   00000000   E000                       LDI     R16,0
   \   00000002   E010                       LDI     R17,0
    422             /*~I:54*/
    423             /* char size is 9 bit ? */
    424             if (UCSR0B_Bit2)
   \   00000004   ....                       LDI     R30,_A_UCSR0B
   \   00000006   E0F0                       LDI     R31,0
   \   00000008   8120                       LD      R18,Z
   \   0000000A   FF22                       SBRS    R18,2
   \   0000000C   C007                       RJMP    ??UA_ui16_GetChar_0
    425             /*~-1*/
    426             {
    427                /*~I:55*/
    428                /* is the 9th bit set ?*/
    429                if (UCSR0B_Bit1)
   \   0000000E   ....                       LDI     R30,_A_UCSR0B
   \   00000010   E0F0                       LDI     R31,0
   \   00000012   8120                       LD      R18,Z
   \   00000014   FF21                       SBRS    R18,1
   \   00000016   C002                       RJMP    ??UA_ui16_GetChar_0
    430                /*~-1*/
    431                {
    432                   /*~T*/
    433                   /* set 9th bit in result */
    434                   ui16_Result = (uint16_t)0x100;
   \   00000018   E000                       LDI     R16,0
   \   0000001A   E011                       LDI     R17,1
    435                /*~-1*/
    436                }
    437                /*~O:I55*/
    438                /*~-2*/
    439                else
    440                {
    441                   /*~T*/
    442                   /* 9th bit in result is cleared */
    443          
    444                /*~-1*/
    445                }
    446                /*~E:I55*/
    447             /*~-1*/
    448             }
    449             /*~O:I54*/
    450             /*~-2*/
    451             else
    452             {
    453                /*~T*/
    454                /* less than 9 bit char size */
    455             /*~-1*/
    456             }
    457             /*~E:I54*/
    458             /*~T*/
    459             /* add first 8 bits to the result */
    460             ui16_Result |= (uint16_t)UDR0;
   \                     ??UA_ui16_GetChar_0:
   \   0000001C   9120....                   LDS     R18,_A_UDR0
   \   00000020   E030                       LDI     R19,0
   \   00000022   2B02                       OR      R16,R18
   \   00000024   2B13                       OR      R17,R19
    461          
    462             /* return received char */
    463             return ui16_Result;
   \   00000026   9508                       RET
    464          
    465          /*~-1*/
    466          }
    467          /*~E:F53*/
    468          /*~E:A52*/
    469          /*~K*/
    470          /*~+:-----   SPECIFIC USER DEFINED FUNCTIONS   -----*/
    471          /*~A:56*/
    472          /*~+:void UA_v_Init (void)*/
    473          /*~F:57*/

   \                                 In segment CODE, align 2, keep-with-next
    474          void UA_v_Init (void)
    475          /*~-1*/
    476          {
    477             /*~K*/
    478             /*~+:-----   PLACE USER INITIALISATION CODE   -----*/
    479             /*~T*/
    480             /* baudrate 9.6k */
    481             UA_v_SetBaudrate (UA_ui16_009600_BPS);
   \   __nearfunc void UA_v_Init();
   \                     UA_v_Init:
   \   00000000   E303                       LDI     R16,51
   \   00000002   E010                       LDI     R17,0
   \   00000004   ....                       RCALL   UA_v_SetBaudrate
    482          
    483             /* set frame format */
    484             UA_v_SetFrameFormat (UA_ui8_ASYNCHRONOUS, UA_ui8_NO_PARITY, UA_ui8_ONE_STOP, UA_ui8_EIGHT_BITS, UA_ui8_POLARITY_LOW);
   \   00000006   E040                       LDI     R20,0
   \   00000008   E036                       LDI     R19,6
   \   0000000A   E020                       LDI     R18,0
   \   0000000C   E010                       LDI     R17,0
   \   0000000E   E000                       LDI     R16,0
   \   00000010   ....                       RCALL   UA_v_SetFrameFormat
    485          
    486             /* enable Tx */
    487             UA_v_Enable_Tx ();
   \   00000012   ....                       RCALL   UA_v_Enable_Tx
    488          
    489             /* enable Rx */
    490             UA_v_Enable_Rx ();
   \   00000014   ....                       RCALL   UA_v_Enable_Rx
    491          
    492             /* disable interrupt Tx */
    493             UA_v_Disable_Interrupt_Tx_Complete ();
   \   00000016   ....                       RCALL   UA_v_Disable_Interrupt_Tx_Complete
    494          
    495             /* disable interrupt Tx buffer empty */
    496             UA_v_Disable_Interrupt_Tx_Empty ();
   \   00000018   ....                       RCALL   UA_v_Disable_Interrupt_Tx_Empty
    497          
    498             /* disable interrupt Rx complete */
    499             UA_v_Disable_Interrupt_Rx ();
   \   0000001A   ....                       RCALL   UA_v_Disable_Interrupt_Rx
    500          
    501             /* clear Tx complete interrupt flag */
    502             UA_v_Clear_Tx_Complete ();
   \   0000001C   ....                       RCALL   UA_v_Clear_Tx_Complete
    503          
    504          /*~-1*/
    505          }
   \   0000001E   9508                       RET
    506          /*~E:F57*/
    507          /*~E:A56*/

   Maximum stack usage in bytes:

     Function                        CSTACK  RSTACK
     --------                        ------  ------
     UA_f_Rx_Complete                    0       0 
     UA_f_Tx_Complete                    0       0 
     UA_f_Tx_Empty                       0       0 
     UA_ui16_GetChar                     0       0 
     UA_ui8_GetErrors                    0       0 
     UA_v_Clear_Tx_Complete              0       0 
     UA_v_Disable_Interrupt_Rx           0       0 
     UA_v_Disable_Interrupt_Tx_Complete
                                         0       0 
     UA_v_Disable_Interrupt_Tx_Empty
                                         0       0 
     UA_v_Disable_Rx                     0       0 
     UA_v_Disable_Tx                     0       0 
     UA_v_Enable_Interrupt_Rx            0       0 
     UA_v_Enable_Interrupt_Tx_Complete
                                         0       0 
     UA_v_Enable_Interrupt_Tx_Empty      0       0 
     UA_v_Enable_Rx                      0       0 
     UA_v_Enable_Tx                      0       0 
     UA_v_Init                           0       2 
       -> UA_v_SetBaudrate               0       2 
       -> UA_v_SetFrameFormat            0       2 
       -> UA_v_Enable_Tx                 0       2 
       -> UA_v_Enable_Rx                 0       2 
       -> UA_v_Disable_Interrupt_Tx_Complete
                                         0       2 
       -> UA_v_Disable_Interrupt_Tx_Empty
                                         0       2 
       -> UA_v_Disable_Interrupt_Rx      0       2 
       -> UA_v_Clear_Tx_Complete         0       2 
     UA_v_MPC_WaitAddress                0       0 
     UA_v_MPC_WaitData                   0       0 
     UA_v_SendChar                       0       0 
     UA_v_SetBaudrate                    0       0 
     UA_v_SetFrameFormat                 0       0 

 
      6 bytes in segment ABSOLUTE
    394 bytes in segment CODE
 
    394 bytes of CODE memory
      0 bytes of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none
