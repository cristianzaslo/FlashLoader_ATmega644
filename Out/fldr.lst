###############################################################################
#                                                                             #
#     IAR Systems AVR Assembler V2.28A/W32 11/Jun/2021  18:14:12              #
#     Copyright 2002 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  Relative jumps do not wrap                       #
#           Source file   =  D:\Projects\FlashLoader_AT644\Source\fldr.s90    #
#           List file     =  D:\Projects\FlashLoader_AT644\Out\fldr.lst       #
#           Object file   =  D:\Projects\FlashLoader_AT644\Out\fldr.r90       #
#           Command line  =  D:\Projects\FlashLoader_AT644\Source\fldr.s90    #
#                            -IC:\IARSystems\avr\inc\                         #
#                            -ID:\Projects\FlashLoader_AT644\Source\          #
#                            -LD:\Projects\FlashLoader_AT644\Out\             #
#                            -OD:\Projects\FlashLoader_AT644\Out\ -v3         #
#                            -u_enhancedCore                                  #
#                                                                             #
###############################################################################

      1    00000000                      NAME Fldr
      2    00000000              
      3    00000000                      RTMODEL "__64bit_doubles", "disabled"
      4    00000000                      RTMODEL "__cpu", "3"
      5    00000000                      RTMODEL "__cpu_name", "AT90Mega16"
      6    00000000                      RTMODEL "__enhanced_core", "enabled"
      7    00000000                      RTMODEL "__has_elpm", "false"
      8    00000000                      RTMODEL "__memory_model", "2"
      9    00000000                      RTMODEL "__rt_version", "2.30"
     10    00000000              
     11    00000000                      RSEG CSTACK:DATA:NOROOT(0)
     12    00000000                      RSEG RSTACK:DATA:NOROOT(0)
     13    00000000              
     14    00000000              
     15    00000000                      PUBLIC FL_aui8_FlashPage
     16    00000000              
     17    00000000                      PUBLIC FL_v_Erase_Page
     18    00000000                      PUBLIC FL_v_Load_Page
     19    00000000                      PUBLIC FL_v_Write_Page
     20    00000000              
     21    00000000                      
     22    00000000                      PUBWEAK __?EEARH
     23    00000000                      PUBWEAK __?EEARL
     24    00000000                      PUBWEAK __?EECR
     25    00000000                      PUBWEAK __?EEDR
     26    00000000              ;     1 /*~-1*/
     27    00000000              ;     2 /*~XSF_LANGUAGE: C/C++*/
     28    00000000              ;     3 /*~A:1*/
     29    00000000              ;     4 /*~+:Header*/
     30    00000000              ;     5 /*~T*/
     31    00000000              ;     6 /* SOURCE FILE    <Fldr.c>
     32    00000000              ;     7 
     33    00000000              ;     8  *************************************
                                 *************************************
     34    00000000              ;    19  *  PROJECT       <FlashLoader_AT644>
     35    00000000              ;    20  *  MODULE        <Fldr>
     36    00000000              ;    21  *  RESPONSIBLE   <Cristian Zaslo>
     37    00000000              ;    22  *************************************
                                 *************************************
     38    00000000              ;    23  *  PURPOSE:      Flash driver
     39    00000000              ;    24  *
     40    00000000              ;    25  *
     41    00000000              ;    26  *************************************
                                 *************************************
     42    00000000              ;    27  *  REMARKS:
     43    00000000              ;    28  *  ATMEGA 644 compliant
     44    00000000              ;    29  *
     45    00000000              ;    30  *************************************
                                 *************************************
     46    00000000              ;    31  *  CHANGE HISTORY:
     47    00000000              ;    32  *
     48    00000000              ;    33  *  Rev 1.0   Mar 01 2021   
                                  CrZa
     49    00000000              ;    34  *  Initial revision.
     50    00000000              ;    35  *
     51    00000000              ;    36  *************************************
                                 ************************************/
     52    00000000              
     53    00000000              
     54    00000000              ; register definition
     55    00000000              #define ZH    R31
     56    00000000              #define ZL    R30
     57    00000000              #define YH    R29
     58    00000000              #define YL    R28
     59    00000000              #define temp1 R20
     60    00000000              #define temp2 R2
     61    00000000              #define temp3 R3
     62    00000000              
     63    00000000              ; page size in words
     64    00000080              PAGESIZE EQU 128
     65    00000000              
     66    00000000              ; command parameters
     67    00000037              SPMCR      EQU 0x37
     68    00000000              BIT_SPMEN  EQU 0x00
     69    00000000              
     70    00000001              SPMEN  EQU 0x01
     71    00000002              PGERS  EQU 0x02
     72    00000004              PGWRT  EQU 0x04
     73    00000010              RWWSRE EQU 0x10
     74    00000000              
     75    00000000              
     76    00000000              
     77    00000000                      RSEG NEAR_N:DATA:NOROOT(0)
     78    00000000              
     79    00000000              ; unsigned char __near FL_aui8_FlashPage[256];
     80    00000000              FL_aui8_FlashPage:
     81    00000000                      DS 256
     82    00000100              
     83    00000100              
     84    00000000                      RSEG CODE:CODE:NOROOT(1)
     85    00000000              
     86    00000000              
     87    00000000              
     88    00000000              ; __nearfunc void FL_v_Erase_Page (uint8_t);
     89    00000000              FL_v_Erase_Page:
     90    00000000              
     91    00000000 2FF0                 MOV ZH,R16;                 load page
                                                    into ZH
     92    00000002 E0E0                 LDI ZL, 0;
     93    00000004              
     94    00000004              Wait_spm1:
     95    00000004 B747                 IN temp1, SPMCR;            read SPMCR
                                                         reg
     96    00000006 FD40                 SBRC temp1, BIT_SPMEN;      jump if
                                                               bit #0
                                                               cleared
     97    00000008 CFFD                 RJMP Wait_spm1;             wait
     98    0000000A              
     99    0000000A E043                 LDI temp1, PGERS | SPMEN;   load ERASE
                                                                  command
                                                                  
    100    0000000C BF47                 OUT SPMCR, temp1;           store
                                                          ERASE command
    101    0000000E 95E8                 SPM;                        execute
                                                                      ERASE
                                                                      command
    102    00000010              
    103    00000010              
    104    00000010              ; enable
    105    00000010              Wait_spm5:
    106    00000010 B747                 IN temp1, SPMCR;            read SPMCR
                                                         reg
    107    00000012 FD40                 SBRC temp1, BIT_SPMEN;      jump if
                                                               bit #0
                                                               cleared
    108    00000014 CFFD                 RJMP Wait_spm5;             wait
    109    00000016              
    110    00000016 E141                 LDI temp1, RWWSRE | SPMEN;  load
                                                                   ENABLE
                                                                   command
    111    00000018 BF47                 OUT SPMCR, temp1;           store
                                                          ENABLE command
    112    0000001A 95E8                 SPM;                        execute
                                                                      ENABLE
                                                                      command
    113    0000001C              
    114    0000001C              
    115    0000001C 9508                 RET;                        return
    116    0000001E              
    117    0000001E              
    118    0000001E              
    119    0000001E              ; __nearfunc void FL_v_Load_Page (void);
    120    0000001E              FL_v_Load_Page:
    121    0000001E              ; save Y
    122    0000001E 2E2C                 MOV temp2, YL;             save
                                                       YL
    123    00000020 2E3D                 MOV temp3, YH;             save
                                                       YH
    124    00000022                    
    125    00000022 ....                 LDI YH, HIGH(FL_aui8_FlashPage);  init
                                                  address to read, high
    126    00000024 ....                 LDI YL, LOW(FL_aui8_FlashPage);   init
                                                  address to read, low
    127    00000026              
    128    00000026 E0F0                 LDI ZH,0;                  init
                                                  ZH
    129    00000028 E0E0                 LDI ZL,0;                  init
                                                  ZL
    130    0000002A              
    131    0000002A E800                 LDI R16, PAGESIZE;         init page
                                                           size
    132    0000002C              
    133    0000002C              loop:
    134    0000002C 9009                 LD R0,Y+;                  read low
                                                  byte
    135    0000002E 9019                 LD R1,Y+;                  read high
                                                  byte
    136    00000030              
    137    00000030              Wait_spm2:
    138    00000030 B747                 IN temp1, SPMCR;           read SPMCR
                                                         reg
    139    00000032 FD40                 SBRC temp1, BIT_SPMEN;     jump if bit
                                                               #0 cleared
    140    00000034 CFFD                 RJMP Wait_spm2;            wait
    141    00000036              
    142    00000036 E041                 LDI temp1, SPMEN;          load LOAD
                                                          command
    143    00000038 BF47                 OUT SPMCR, temp1;          store LOAD
                                                          command
    144    0000003A 95E8                 SPM;                       execute
                                                                     LOAD
                                                                     command
    145    0000003C              
    146    0000003C 9632                 ADIW ZH:ZL, 2;             next word
                                                       address
    147    0000003E              
    148    0000003E 5001                 SUBI R16, 1;               dec
                                                     pagesize
    149    00000040 F7A9                 BRNE loop;                 branch if
                                                                     not
                                                                     zero
    150    00000042              
    151    00000042              ; restore Y
    152    00000042 2DC2                 MOV YL, temp2;             restore
                                                       YL
    153    00000044 2DD3                 MOV YH, temp3;             restore
                                                       YH
    154    00000046                      
    155    00000046 9508                 RET;                       return
    156    00000048              
    157    00000048              
    158    00000048              
    159    00000048              ; __nearfunc void FL_v_Write_Page (uint8_t);
    160    00000048              FL_v_Write_Page:
    161    00000048              
    162    00000048 2FF0                 MOV ZH,R16;                load page
                                                    
    163    0000004A              
    164    0000004A              Wait_spm3:
    165    0000004A B747                 IN temp1, SPMCR;           read SPMCR
                                                         reg
    166    0000004C FD40                 SBRC temp1, BIT_SPMEN;     jump if bit
                                                               #0 cleared
    167    0000004E CFFD                 RJMP Wait_spm3;            wait
    168    00000050              
    169    00000050 E045                 LDI temp1, PGWRT | SPMEN;  load WRITE
                                                                  command
    170    00000052 BF47                 OUT SPMCR, temp1;          store WRITE
                                                          command
    171    00000054 95E8                 SPM;                       execute
                                                                     WRITE
                                                                     command
    172    00000056              
    173    00000056              ; enable
    174    00000056              Wait_spm4:
    175    00000056 B747                 IN temp1, SPMCR;           read SPMCR
                                                         reg
    176    00000058 FD40                 SBRC temp1, BIT_SPMEN;     jump if bit
                                                               #0 cleared
    177    0000005A CFFD                 RJMP Wait_spm4;            wait
    178    0000005C              
    179    0000005C E141                 LDI temp1, RWWSRE | SPMEN; load ENABLE
                                                                   command
    180    0000005E BF47                 OUT SPMCR, temp1;          store
                                                          ENABLE command
    181    00000060 95E8                 SPM;                       execute
                                                                     ENABLE
                                                                     command
    182    00000062              
    183    00000062              
    184    00000062 9508                 RET;                       return
    185    00000064              
    186    00000064              
    187    00000064              
    188    00000000                      ASEGN ABSOLUTE:DATA:NOROOT,01cH
    189    00000000              __?EECR:
    190    00000000              
    191    00000000                      ASEGN ABSOLUTE:DATA:NOROOT,01dH
    192    00000000              __?EEDR:
    193    00000000              
    194    00000000                      ASEGN ABSOLUTE:DATA:NOROOT,01eH
    195    00000000              __?EEARL:
    196    00000000              
    197    00000000                      ASEGN ABSOLUTE:DATA:NOROOT,01fH
    198    00000000              __?EEARH:
    199    00000000              
    200    00000000                      END
##############################
#          CRC:B56           #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 100         #
##############################



