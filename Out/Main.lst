##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN             11/Jun/2021  18:14:12 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  D:\Projects\FlashLoader_AT644\Source\Main.c             #
#    Command line =  D:\Projects\FlashLoader_AT644\Source\Main.c             #
#                    -IC:\IARSystems\avr\inc\ -ID:\Projects\FlashLoader_AT64 #
#                    4\Source\ -lA D:\Projects\FlashLoader_AT644\Out\ -lC    #
#                    D:\Projects\FlashLoader_AT644\Out\ -o                   #
#                    D:\Projects\FlashLoader_AT644\Out\ -e -s3 --cpu=m16     #
#                    --memory_model=small --eeprom_size=2048                 #
#                    --initializers_in_flash                                 #
#    List file    =  D:\Projects\FlashLoader_AT644\Out\Main.lst              #
#    Object file  =  D:\Projects\FlashLoader_AT644\Out\Main.r90              #
#                                                                            #
#                                                                            #
##############################################################################

      1          /*~-1*/
      2          /*~XSF_LANGUAGE: C/C++*/
      3          /*~A:1*/
      4          /*~+:Header*/
      5          /*~T*/
      6          /* SOURCE FILE     <Main.c>
      7          
      8           **************************************************************************
      9           *  PROJECT       <FlashLoader_AT644>
     10           *  MODULE        <Main>
     11           *  RESPONSIBLE   <Cristian Zaslo>
     12           **************************************************************************
     13           *  PURPOSE:      Program entry point
     14           *
     15           *
     16           **************************************************************************
     17           *  REMARKS:
     18           *  none
     19           *
     20           **************************************************************************
     21           *  CHANGE HISTORY:
     22           *  Log of all revisions so far:
     23           *
     24           *  Rev 1.0   May 01 2021    CrZa
     25           *  Initial revision.
     26           *
     27           *************************************************************************/
     28          
     29          
     30          
     31          /*~E:A1*/
     32          /*~A:2*/
     33          /*~+:Includes*/
     34          /*~T*/
     35          #include <iom644.h>

   \                                 In segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_PIND;
   \                     _A_PIND:
   \   00000000                              DS 1
     36          #include "Global.h"
     37          #include "Io.h"
     38          #include "Uart.h"
     39          #include "Fldr.h"
     40          #include "Main.h"
     41          
     42          
     43          /*~E:A2*/
     44          /*~A:3*/
     45          /*~+:Types*/
     46          /*~T*/
     47          
     48          /*~E:A3*/
     49          /*~A:4*/
     50          /*~+:Constants*/
     51          /*~T*/
     52          /* header value */
     53          #define MA_ui8_HEADER  0x55
     54          
     55          /*~T*/
     56          /* header size */
     57          #define MA_ui8_HEADER_SIZE (uint8_t)3
     58          
     59          /*~T*/
     60          /* positive acknowledge */
     61          #define MA_ui8_POSITIVE_ACKN 0x55
     62          
     63          /* negative acknowledge */
     64          #define MA_ui8_NEGATIVE_ACKN 0xAA
     65          
     66          /*~T*/
     67          /* program states */
     68          #define MA_ui8_INIT           0
     69          #define MA_ui8_READ_HEADER    1
     70          #define MA_ui8_READ_PAGE      2
     71          #define MA_ui8_WRITE_PAGE     3
     72          #define MA_ui8_CHECK_PRG      4
     73          #define MA_ui8_END           10
     74          
     75          /*~E:A4*/
     76          /*~A:5*/
     77          /*~+:Variables*/
     78          /*~T*/
     79          
     80          
     81          /*~E:A5*/
     82          /*~A:6*/
     83          /*~+:Macros*/
     84          /*~T*/
     85          
     86          /*~E:A6*/
     87          /*~A:7*/
     88          /*~+:Flags / Bit Masks*/
     89          /*~T*/
     90          
     91          /*~E:A7*/
     92          /*~A:8*/
     93          /*~+:Function prototypes*/
     94          /*~T*/
     95          
     96          /*~E:A8*/
     97          /*~A:9*/
     98          /*~+:int main (void)*/
     99          /*~F:10*/

   \                                 In segment CODE, align 2, keep-with-next
    100          int main (void)
    101          /*~-1*/
    102          {
   \   __nearfunc int main();
   \                     main:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   939A                       ST      -Y,R25
   \   00000006   938A                       ST      -Y,R24
    103             /*~T*/
    104             /* state */
    105             uint8_t ui8_State;
    106          
    107             /* byte counter */
    108             uint8_t ui8_ByteCounter;
    109          
    110             /* page counter */
    111             uint8_t ui8_PageCounter;
    112          
    113             /* expected checksum */
    114             uint16_t ui16_EChecksum;
    115          
    116             /* calculated checksum */
    117             uint16_t ui16_CChecksum;
    118          
    119             /*~T*/
    120             /* init global */
    121             GL_v_Init ();
   \   00000008   ........                   CALL    GL_v_Init
    122          
    123             /* init IOs */
    124             IO_v_Init ();
   \   0000000C   ........                   CALL    IO_v_Init
    125          
    126             /*~I:11*/
    127             /* check three times on low level on FLI pin */
    128             if (!IO_ui8_GET_PIN_TERMINAL (IO_f_PORT_FLI) && !IO_ui8_GET_PIN_TERMINAL (IO_f_PORT_FLI) && !IO_ui8_GET_PIN_TERMINAL (IO_f_PORT_FLI))
   \   00000010   994A                       SBIC    0x09,0x02
   \   00000012   C004                       RJMP    ??main_0
   \   00000014   994A                       SBIC    0x09,0x02
   \   00000016   C002                       RJMP    ??main_0
   \   00000018   9B4A                       SBIS    0x09,0x02
   \   0000001A   C002                       RJMP    ??main_1
    129             /*~-1*/
    130             {
    131                /*~T*/
    132                /* FLI input is low, go to FL section */
    133             /*~-1*/
    134             }
    135             /*~O:I11*/
    136             /*~-2*/
    137             else
    138             {
    139                /*~T*/
    140                /* FLI input is high, jump to application */
    141                asm("JMP 0x0000\n");
   \                     ??main_0:
   \   0000001C   940C0000           JMP 0x0000
    142          
    143             /*~-1*/
    144             }
    145             /*~E:I11*/
    146             /*~T*/
    147             /* init state */
    148             ui8_State = MA_ui8_INIT;
   \                     ??main_1:
   \   00000020   E000                       LDI     R16,0
   \   00000022   C009                       RJMP    ??main_2
    149             /*~U:12*/
    150             /*~-2*/
    151             do
    152             {
    153                /*~C:13*/
    154                /* selection on state */
    155                switch (ui8_State)
    156                /*~-1*/
    157                {
    158                   /*~A:14*/
    159                   /*~+:Init*/
    160                   /*~F:15*/
    161                   /* init */
    162                   case MA_ui8_INIT:
    163                   /*~-1*/
    164                   {
    165                      /*~T*/
    166                      /* disable interrupts */
    167                      asm("CLI\n");
   \                     ??main_3:
   \   00000024   94F8               CLI
    168          
    169                      /* init UART */
    170                      UA_v_Init ();
   \   00000026   ........                   CALL    UA_v_Init
    171          
    172                      /* send char */
    173                      UA_v_SendChar (MA_ui8_HEADER);
   \   0000002A   E505                       LDI     R16,85
   \   0000002C   E010                       LDI     R17,0
   \   0000002E   ........                   CALL    UA_v_SendChar
    174          
    175                      /* init page counter */
    176                      ui8_PageCounter = 0;
   \   00000032   E090                       LDI     R25,0
    177          
    178                      /* change state */
    179                      ui8_State = MA_ui8_READ_HEADER;
   \   00000034   E001                       LDI     R16,1
   \                     ??main_2:
   \   00000036   2F10                       MOV     R17,R16
   \   00000038   5010                       SUBI    R17,0
   \   0000003A   F3A1                       BREQ    ??main_3
   \   0000003C   951A                       DEC     R17
   \   0000003E   F049                       BREQ    ??main_4
   \   00000040   951A                       DEC     R17
   \   00000042   F1B1                       BREQ    ??main_5
   \   00000044   951A                       DEC     R17
   \   00000046   F409                       BRNE    ??main_6
   \   00000048   C052                       RJMP    ??main_7
   \                     ??main_6:
   \   0000004A   951A                       DEC     R17
   \   0000004C   F409                       BRNE    ??main_8
   \   0000004E   C064                       RJMP    ??main_9
   \                     ??main_8:
   \   00000050   CFF2                       RJMP    ??main_2
    180          
    181                      /*~T*/
    182                      /* break */
    183                      break;
    184                   /*~-1*/
    185                   }
    186                   /*~E:F15*/
    187                   /*~E:A14*/
    188                   /*~A:16*/
    189                   /*~+:Read header*/
    190                   /*~F:17*/
    191                   /* read header */
    192                   case MA_ui8_READ_HEADER:
    193                   /*~-1*/
    194                   {
    195                      /*~T*/
    196                      /* init counter */
    197                      ui8_ByteCounter = 0;
   \                     ??main_4:
   \   00000052   E080                       LDI     R24,0
    198                      /*~U:18*/
    199                      /*~-2*/
    200                      do
    201                      {
    202                         /*~U:19*/
    203                         /*~-2*/
    204                         do
    205                         {
    206                            /*~T*/
    207                            /* wait for Rx buffer full */
    208                         /*~-1*/
    209                         }
    210                         /*~O:U19*/
    211                         while (!UA_f_Rx_Complete ()); /* loop */
   \                     ??main_10:
   \   00000054   ........                   CALL    UA_f_Rx_Complete
   \   00000058   2300                       TST     R16
   \   0000005A   F3E1                       BREQ    ??main_10
    212                         /*~E:U19*/
    213                         /*~T*/
    214                         /* store byte into buffer */
    215                         FL_aui8_FlashPage [ui8_ByteCounter] = (uint8_t)UA_ui16_GetChar ();
   \   0000005C   ........                   CALL    UA_ui16_GetChar
   \   00000060   2F20                       MOV     R18,R16
   \   00000062   2F08                       MOV     R16,R24
   \   00000064   E010                       LDI     R17,0
   \   00000066   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000068   ....                       SUBI    R30,LOW((-(FL_aui8_FlashPage) & 0xFFFF))
   \   0000006A   ....                       SBCI    R31,(-(FL_aui8_FlashPage) & 0xFFFF) >> 8
   \   0000006C   8320                       ST      Z,R18
    216          
    217                      /*~-1*/
    218                      }
    219                      /*~O:U18*/
    220                      while (ui8_ByteCounter++ < (uint8_t)(MA_ui8_HEADER_SIZE - 1));/* loop */
   \   0000006E   2F08                       MOV     R16,R24
   \   00000070   2F80                       MOV     R24,R16
   \   00000072   9583                       INC     R24
   \   00000074   3002                       CPI     R16,2
   \   00000076   F370                       BRCS    ??main_10
    221                      /*~E:U18*/
    222                      /*~I:20*/
    223                      /* Rx error or wrong identification ? */
    224                      if (UA_ui8_GetErrors () || (FL_aui8_FlashPage [0] != MA_ui8_HEADER))
   \   00000078   ........                   CALL    UA_ui8_GetErrors
   \   0000007C   2300                       TST     R16
   \   0000007E   F421                       BRNE    ??main_11
   \   00000080   9100....                   LDS     R16,FL_aui8_FlashPage
   \   00000084   3505                       CPI     R16,85
   \   00000086   F031                       BREQ    ??main_12
    225                      /*~-1*/
    226                      {
    227                         /*~T*/
    228                         /* send feedback */
    229                         UA_v_SendChar (MA_ui8_NEGATIVE_ACKN);
   \                     ??main_11:
   \   00000088   EA0A                       LDI     R16,170
   \   0000008A   E010                       LDI     R17,0
   \   0000008C   ........                   CALL    UA_v_SendChar
    230          
    231                         /* change state */
    232                         ui8_State = MA_ui8_END;
   \   00000090   E00A                       LDI     R16,10
   \   00000092   CFD1                       RJMP    ??main_2
    233          
    234                      /*~-1*/
    235                      }
    236                      /*~O:I20*/
    237                      /*~-2*/
    238                      else
    239                      {
    240                         /*~T*/
    241                         /* store expected checksum */
    242                         ui16_EChecksum = (uint16_t)FL_aui8_FlashPage [1];
   \                     ??main_12:
   \   00000094   91A0....                   LDS     R26,(FL_aui8_FlashPage + 1)
   \   00000098   E0B0                       LDI     R27,0
    243                         ui16_EChecksum += ((uint16_t)FL_aui8_FlashPage [2] << 8);
   \   0000009A   9110....                   LDS     R17,(FL_aui8_FlashPage + 2)
   \   0000009E   E000                       LDI     R16,0
   \   000000A0   0FA0                       ADD     R26,R16
   \   000000A2   1FB1                       ADC     R27,R17
    244          
    245                         /* send feedback */
    246                         UA_v_SendChar (MA_ui8_HEADER);
   \   000000A4   E505                       LDI     R16,85
   \   000000A6   E010                       LDI     R17,0
   \   000000A8   ........                   CALL    UA_v_SendChar
    247          
    248                         /* change state */
    249                         ui8_State = MA_ui8_READ_PAGE;
   \   000000AC   E002                       LDI     R16,2
   \   000000AE   CFC3                       RJMP    ??main_2
    250          
    251                      /*~-1*/
    252                      }
    253                      /*~E:I20*/
    254                      /*~T*/
    255                      /* break */
    256                      break;
    257                   /*~-1*/
    258                   }
    259                   /*~E:F17*/
    260                   /*~E:A16*/
    261                   /*~A:21*/
    262                   /*~+:Read page*/
    263                   /*~F:22*/
    264                   /* read page */
    265                   case MA_ui8_READ_PAGE:
    266                   /*~-1*/
    267                   {
    268                      /*~T*/
    269                      /* init counter */
    270                      ui8_ByteCounter = 0;
   \                     ??main_5:
   \   000000B0   E080                       LDI     R24,0
    271                      /*~U:23*/
    272                      /*~-2*/
    273                      do
    274                      {
    275                         /*~U:24*/
    276                         /*~-2*/
    277                         do
    278                         {
    279                            /*~T*/
    280                            /* wait for Rx buffer full */
    281                         /*~-1*/
    282                         }
    283                         /*~O:U24*/
    284                         while (!UA_f_Rx_Complete ()); /* loop */
   \                     ??main_13:
   \   000000B2   ........                   CALL    UA_f_Rx_Complete
   \   000000B6   2300                       TST     R16
   \   000000B8   F3E1                       BREQ    ??main_13
    285                         /*~E:U24*/
    286                         /*~T*/
    287                         /* store byte into buffer */
    288                         FL_aui8_FlashPage [ui8_ByteCounter] = (uint8_t)UA_ui16_GetChar ();
   \   000000BA   ........                   CALL    UA_ui16_GetChar
   \   000000BE   2F20                       MOV     R18,R16
   \   000000C0   2F08                       MOV     R16,R24
   \   000000C2   E010                       LDI     R17,0
   \   000000C4   01F8                       MOVW    R31 : R30,R17 : R16
   \   000000C6   ....                       SUBI    R30,LOW((-(FL_aui8_FlashPage) & 0xFFFF))
   \   000000C8   ....                       SBCI    R31,(-(FL_aui8_FlashPage) & 0xFFFF) >> 8
   \   000000CA   8320                       ST      Z,R18
    289          
    290                      /*~-1*/
    291                      }
    292                      /*~O:U23*/
    293                      while (ui8_ByteCounter++ < (uint8_t)(MA_ui16_PAGE_SIZE - 1));/* loop */
   \   000000CC   2F08                       MOV     R16,R24
   \   000000CE   2F80                       MOV     R24,R16
   \   000000D0   9583                       INC     R24
   \   000000D2   3F0F                       CPI     R16,255
   \   000000D4   F370                       BRCS    ??main_13
    294                      /*~E:U23*/
    295                      /*~I:25*/
    296                      /* Rx error or wrong identification ? */
    297                      if (UA_ui8_GetErrors ())
   \   000000D6   ........                   CALL    UA_ui8_GetErrors
   \   000000DA   2300                       TST     R16
   \   000000DC   F031                       BREQ    ??main_14
    298                      /*~-1*/
    299                      {
    300                         /*~T*/
    301                         /* send feedback */
    302                         UA_v_SendChar (MA_ui8_NEGATIVE_ACKN);
   \   000000DE   EA0A                       LDI     R16,170
   \   000000E0   E010                       LDI     R17,0
   \   000000E2   ........                   CALL    UA_v_SendChar
    303          
    304                         /* change state */
    305                         ui8_State = MA_ui8_END;
   \   000000E6   E00A                       LDI     R16,10
   \   000000E8   CFA6                       RJMP    ??main_2
    306          
    307                      /*~-1*/
    308                      }
    309                      /*~O:I25*/
    310                      /*~-2*/
    311                      else
    312                      {
    313                         /*~T*/
    314                         /* change state */
    315                         ui8_State = MA_ui8_WRITE_PAGE;
   \                     ??main_14:
   \   000000EA   E003                       LDI     R16,3
   \   000000EC   CFA4                       RJMP    ??main_2
    316          
    317                      /*~-1*/
    318                      }
    319                      /*~E:I25*/
    320                      /*~T*/
    321                      /* break */
    322                      break;
    323                   /*~-1*/
    324                   }
    325                   /*~E:F22*/
    326                   /*~E:A21*/
    327                   /*~A:26*/
    328                   /*~+:Write page*/
    329                   /*~F:27*/
    330                   /* write page */
    331                   case MA_ui8_WRITE_PAGE:
    332                   /*~-1*/
    333                   {
    334                      /*~T*/
    335                      /* erase page */
    336                      FL_v_Erase_Page (ui8_PageCounter);
   \                     ??main_7:
   \   000000EE   2F09                       MOV     R16,R25
   \   000000F0   ........                   CALL    FL_v_Erase_Page
    337          
    338                      /* load page */
    339                      FL_v_Load_Page ();
   \   000000F4   ........                   CALL    FL_v_Load_Page
    340          
    341                      /* write page */
    342                      FL_v_Write_Page (ui8_PageCounter);
   \   000000F8   2F09                       MOV     R16,R25
   \   000000FA   ........                   CALL    FL_v_Write_Page
    343          
    344                      /* send feedback */
    345                      UA_v_SendChar (ui8_PageCounter);
   \   000000FE   2F09                       MOV     R16,R25
   \   00000100   E010                       LDI     R17,0
   \   00000102   ........                   CALL    UA_v_SendChar
    346          
    347                      /*~I:28*/
    348                      /* all pages done ? */
    349                      if (ui8_PageCounter++ == (uint8_t)(MA_ui16_PAGES_TO_WRITE - 1))
   \   00000106   2F09                       MOV     R16,R25
   \   00000108   2F90                       MOV     R25,R16
   \   0000010A   9593                       INC     R25
   \   0000010C   3F0B                       CPI     R16,251
   \   0000010E   F411                       BRNE    ??main_15
    350                      /*~-1*/
    351                      {
    352                         /*~T*/
    353                         /* change state */
    354                         ui8_State = MA_ui8_CHECK_PRG;
   \   00000110   E004                       LDI     R16,4
   \   00000112   CF91                       RJMP    ??main_2
    355          
    356                      /*~-1*/
    357                      }
    358                      /*~O:I28*/
    359                      /*~-2*/
    360                      else
    361                      {
    362                         /*~T*/
    363                         /* change state */
    364                         ui8_State = MA_ui8_READ_PAGE;
   \                     ??main_15:
   \   00000114   E002                       LDI     R16,2
   \   00000116   CF8F                       RJMP    ??main_2
    365          
    366                      /*~-1*/
    367                      }
    368                      /*~E:I28*/
    369                      /*~T*/
    370                      /* break */
    371                      break;
    372                   /*~-1*/
    373                   }
    374                   /*~E:F27*/
    375                   /*~E:A26*/
    376                   /*~A:29*/
    377                   /*~+:Check programming*/
    378                   /*~F:30*/
    379                   /* check programming */
    380                   case MA_ui8_CHECK_PRG:
    381                   /*~-1*/
    382                   {
    383                      /*~T*/
    384                      /* init calculated checksum */
    385                      ui16_CChecksum = 0;
   \                     ??main_9:
   \   00000118   E020                       LDI     R18,0
   \   0000011A   E030                       LDI     R19,0
    386          
    387                      /* init page counter */
    388                      ui8_PageCounter = 0;
   \   0000011C   E090                       LDI     R25,0
    389          
    390                      /*~U:31*/
    391                      /*~-2*/
    392                      do
    393                      {
    394                         /*~T*/
    395                         /* init counter */
    396                         ui8_ByteCounter = 0;
   \                     ??main_16:
   \   0000011E   E080                       LDI     R24,0
    397          
    398                         /*~U:32*/
    399                         /*~-2*/
    400                         do
    401                         {
    402                            /*~T*/
    403                            /* update calculated checksum */
    404                            ui16_CChecksum += *(__flash  uint8_t *)(((uint16_t)ui8_PageCounter << 8) + ui8_ByteCounter); 
   \                     ??main_17:
   \   00000120   2F19                       MOV     R17,R25
   \   00000122   E000                       LDI     R16,0
   \   00000124   2FE8                       MOV     R30,R24
   \   00000126   E0F0                       LDI     R31,0
   \   00000128   0FE0                       ADD     R30,R16
   \   0000012A   1FF1                       ADC     R31,R17
   \   0000012C   9104                       LPM     R16,Z
   \   0000012E   E010                       LDI     R17,0
   \   00000130   0F20                       ADD     R18,R16
   \   00000132   1F31                       ADC     R19,R17
    405                         /*~-1*/
    406                         }
    407                         /*~O:U32*/
    408                         while (ui8_ByteCounter++ < (uint8_t)(MA_ui16_PAGE_SIZE - 1)); /* loop */
   \   00000134   2F08                       MOV     R16,R24
   \   00000136   2F80                       MOV     R24,R16
   \   00000138   9583                       INC     R24
   \   0000013A   3F0F                       CPI     R16,255
   \   0000013C   F388                       BRCS    ??main_17
    409                         /*~E:U32*/
    410                      /*~-1*/
    411                      }
    412                      /*~O:U31*/
    413                      while (ui8_PageCounter++ < (uint8_t)(MA_ui16_PAGES_TO_WRITE - 1)); /* loop */
   \   0000013E   2F09                       MOV     R16,R25
   \   00000140   2F90                       MOV     R25,R16
   \   00000142   9593                       INC     R25
   \   00000144   3F0B                       CPI     R16,251
   \   00000146   F358                       BRCS    ??main_16
    414                      /*~E:U31*/
    415                      /*~I:33*/
    416                      /* calculated and expected are the same ? */
    417                      if (ui16_CChecksum == ui16_EChecksum)
   \   00000148   172A                       CP      R18,R26
   \   0000014A   073B                       CPC     R19,R27
   \   0000014C   F429                       BRNE    ??main_18
    418                      /*~-1*/
    419                      {
    420                         /*~T*/
    421                         /* send feedback */
    422                         UA_v_SendChar (MA_ui8_POSITIVE_ACKN);
   \   0000014E   E505                       LDI     R16,85
   \   00000150   E010                       LDI     R17,0
   \   00000152   ........                   CALL    UA_v_SendChar
   \   00000156   C004                       RJMP    ??main_19
    423          
    424                      /*~-1*/
    425                      }
    426                      /*~O:I33*/
    427                      /*~-2*/
    428                      else
    429                      {
    430                         /*~T*/
    431                         /* send feedback */
    432                         UA_v_SendChar (MA_ui8_NEGATIVE_ACKN);
   \                     ??main_18:
   \   00000158   EA0A                       LDI     R16,170
   \   0000015A   E010                       LDI     R17,0
   \   0000015C   ........                   CALL    UA_v_SendChar
    433          
    434                      /*~-1*/
    435                      }
    436                      /*~E:I33*/
    437                      /*~T*/
    438                      /* change state */
    439                      ui8_State = MA_ui8_END;
   \                     ??main_19:
   \   00000160   E00A                       LDI     R16,10
    440          
    441                      /*~T*/
    442                      /* break */
    443                      break;
   \   00000162   CF69                       RJMP    ??main_2
    444                   /*~-1*/
    445                   }
    446                   /*~E:F30*/
    447                   /*~E:A29*/
    448                   /*~O:C13*/
    449                   /*~-2*/
    450                   default:
    451                   {
    452                      /*~T*/
    453                      /* MA_ui8_END */
    454                      /* flash sequence complete */
    455          
    456                   /*~-1*/
    457                   }
    458                /*~-1*/
    459                }
    460                /*~E:C13*/
    461             /*~-1*/
    462             }
    463             /*~O:U12*/
    464             while (TRUE); /* endless loop */
    465             /*~E:U12*/
    466          /*~-1*/
    467          }
    468          /*~E:F10*/
    469          /*~E:A9*/

   Maximum stack usage in bytes:

     Function               CSTACK  RSTACK
     --------               ------  ------
     main                       4       2 
       -> GL_v_Init             4       2 
       -> IO_v_Init             4       2 
       -> UA_v_Init             4       2 
       -> UA_v_SendChar         4       2 
       -> UA_f_Rx_Complete      4       2 
       -> UA_ui16_GetChar       4       2 
       -> UA_ui8_GetErrors      4       2 
       -> UA_v_SendChar         4       2 
       -> UA_v_SendChar         4       2 
       -> UA_f_Rx_Complete      4       2 
       -> UA_ui16_GetChar       4       2 
       -> UA_ui8_GetErrors      4       2 
       -> UA_v_SendChar         4       2 
       -> FL_v_Erase_Page       4       2 
       -> FL_v_Load_Page        4       2 
       -> FL_v_Write_Page       4       2 
       -> UA_v_SendChar         4       2 
       -> UA_v_SendChar         4       2 
       -> UA_v_SendChar         4       2 

 
      1 byte  in segment ABSOLUTE
    356 bytes in segment CODE
 
    356 bytes of CODE memory
      0 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: none
